*clighter.txt*	Plugin for c-family semantic source code highlighting, based
on Clang
*clighter*

Author: bbchung (afafaf4@gmail.com)
For Vim version 7.4+

==============================================================================
CONTENTS                                                  *clighter-contents*
1. Intro 			|clighter-intro|
2. Clighter on the internet	|clighter-internet|
3. Requirements			|clighter-requirements|
4. Options 			|clighter-options|
5. Commands 			|clighter-commands|
6. Customize Colors 		|clighter-colors|
7. FAQ				|clighter-faq|

==============================================================================
						*clighter-intro*
1. Intro~
Clighter(Clang Highlighter) is a c-family semantic highlighting plugin for
Vim, based on Clang. Clighter use libclang to enhance c-family source code
highlighting from Vim builtin syntax highlighting to semantic highlighting.
Clighter doesn't disable the builtin syntax highlighting, but just "append"
the semantic highlighting into the code.  

Clighter provides the following features:

    * Automatically do semantic highlighting for c-family source code.
    * Automatically mark all words that with the same definition
    * Options to customize the colors

==============================================================================
						*clighter-internet*
2. Clighter on the internet~

The Github repository is at:
>
	https://github.com/bbchung/clighter
<
==============================================================================
						*clighter-requirements*
3. Requirements~

The clighter plugin requires the following:

    * Vim version 7.4+ with python2 enabled
    * libclang

Clighter has been tested in linux platform only

==============================================================================
						*clighter-options*
4. Options~

|'g:clighter_autostart'|		Enable the Clighter when vim start
|'g:clighter_window_size'|		Window size for highlighting
|'g:clighter_clang_options'|		The Compile options for Clang
|'g:clighter_libclang_file'|		The file path of the libclang
|'g:clighter_realtime'|			Update highlighting in realtime	

						*'clighter_autostart'*
g:clighter_autostart~
Clighter will automatically start with Vim if set g:clighter_autostart to 1,
otherwise, you have to manually start Clighter by ClighterEnable command.

Default: 1
>
	let g:clighter_autostart = 0
<

						*'clighter_window_size'*
g:clighter_window_size~
Clighter uses vim regular expression engine to do syntax highlighting,
but vim's RE engine performs very bad when there are too many rules. Clighter
highlights a given region instead of whole buffer while cursor is moved, to get
the good performance even when the buffer is very large. 
	
< 0: highlight whole buffer.
>= 0: highlight from top line number reduce 100 * clighter_window_size to bottom 
line number plug 100 * clighter_window_size of screen.

Default: 1
>
	let g:clighter_window_size = -1 " whole buffer
	let g:clighter_window_size = 0 " highlight current screen of window
<
						*'clighter_clang_options'*
g:clighter_clang_options~
The compiler options for Clang. Sometimes Clighter doesn't do correct
highlighting cause Clang can't parse the source code without necessary
options, so you need tell Clang how to parse the code.

Default: []
>
	let g:clighter_clang_options = ['-std=c++', '-DLinux']
<
						*'clighter_libclang_file'*
g:clighter_libclang_file~
If your libclang is not in default path of system, tell Clighter by this
option.

Default: ''
>
	let g:clighter_libclang_file = '/usr/lib/libclang.so'
<
						*'clighter_realtime'*
g:clighter_realtime~
Highlight the code in realtime(CursorMoved event), rather than when cursor is
idle for a while(CursorHold event). By testing, a normal x86 machine can turn
on the realtime highlighting without delay. If you feel vim is laggy, turn off
this option.

Default: 1
>
	let g:clighter_realtime = 1
<

==============================================================================
						*clighter-commands*
Clighter provides command to control it

Enable Clighter~
>
	ClighterEnable
<

Disable Clighter~
Notice that is will not disable the cursor highlighting.
>
	ClighterDisable
<

Toggle cursor highlighting~
>
	ClighterToggleCursorHL
<

==============================================================================
						*clighter-colors*
6. Customize Colors~

Clighter defines the following syntax group corresponding to CursorKing of
Clang.

MacroInstantiation~
>
	hi link MacroInstantiation Macro
>

TypeRef~
>
	hi link TypeRef Type
>

StructDecl~
>
	hi link StructDecl Type
>

ClassDecl~
>
	hi link ClassDecl Type
>

EnumDecl~
>
	hi link EnumDecl Type
>

EnumConstantDecl~
>
	hi link EnumConstantDecl Identifier
>

EnumDefRefExpr~
>
	hi link EnumDefRefExpr Identifier
>

You can customize these colors in your colorscheme, for example:
>
	hi TypeRef term=NONE cterm=NONE ctermbg=232 ctermfg=255 gui=NONE
	hi ClassDecl term=NONE cterm=NONE ctermbg=255 ctermfg=232 gui=NONE
<

==============================================================================
						*clighter-faq*
7.. FAQ

Q. The clighter plugin doesn't work.
A. Vim version 7.4+ is required, and make sure libclang is installed
correctly and set g:clighter_libclang_file if need.

Q. Highlighting is not quick-response
A. Clighter use CursorHold event to update the current window highlighting,
and only highlight the code when parsing is done. To get the better response
time, you can set g:clighter_realtime = 1, or change updatetime to a smaller
value and pray your Clang run faster. Notice that many other plugins will
change updatetime. If the code includes the header file that was modified,
you must save the header.
>
	let g:clighter_realtime = 1 " use realtime render
	set updatetime=1200 " set smaller value
<

==============================================================================

vim:tw=78:ts=8:noet:ft=help:
