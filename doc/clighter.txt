*clighter*	Plugin to improve c-family development environment based on Clang

==============================================================================
CONTENTS					*clighter-contents*
1. Intro			|clighter-intro|
2. Requirements			|clighter-requirements|
3. Installation			|clighter-installation|
4. Options			|clighter-options|
5. Commands and Functions	|clighter-commands-and-functions|
6. Syntax Group			|clighter-syntax-group|
7. FAQ				|clighter-faq|

==============================================================================
						*clighter-intro*
1. Intro~

Clighter(C lighter) is a vim plugin that integrates libclang to improve
development environment for c-family programming. Clighter provides following
features currently:

* Syntax(semantic) highlighting
* Cursor word highlighting
* Experimental rename-refactoring function

Github~

https://github.com/bbchung/clighter

==============================================================================
						*clighter-requirements*
2. Requirements~

Clighter requires the following:

* Vim version 7.4 with python2.x enabled
* libclang with python binding(3.5 is recommended). Please reference
  http://llvm.org/apt/ to install
* Clighter has been tested under Linux

==============================================================================
						*clighter-installation*
3. Installation~

Vundle Install~
>
	Bundle 'bbchung/clighter'
<

Manuall Install~

Untar the clighter.tar.gz to your vim path.

==============================================================================
						*clighter-options*
4. Options~

|g:clighter_autostart|
|g:ClighterCompileArgs|
|g:clighter_libclang_file|
|g:clighter_rename_prompt_level|
|g:clighter_enable_cross_rename|
|g:clighter_highlight_groups|
|g:clighter_cursor_hl_default|

------------------------------------------------------------------------------
						*g:clighter_autostart*
g:clighter_autostart~

Clighter will automatically start while g:clighter_autostart == `1`.

Default: `1`
>
	let g:clighter_autostart = 1
<
------------------------------------------------------------------------------
						*g:ClighterCompileArgs*
g:ClighterCompileArgs~

Clighter will pass these args to libclang to parse the code. Notice that bad
options will cause clighter not working even crashing. For convenience, you
can use |mksession| to save this option.

Default: `'["-Iinclude"]'`
>
	let g:ClighterCompileArgs = '["-Iinclude"]'
<
------------------------------------------------------------------------------
						*g:clighter_libclang_file*
g:clighter_libclang_file~

Clighter try to find libclang-3.5 in your system automatically. You must set
this option if clighter cannot find libclang or other version of libclang is
used.

Default: `''`
>
	let g:clighter_libclang_file = ''
<
------------------------------------------------------------------------------
						*g:clighter_rename_prompt_level*
g:clighter_rename_prompt_level~

The prompt level of rename refactoring.

`0`: no prompt
`1`: prompt while doing cross buffer rename
`2`: prompt while any word that is going to be replaced

Default: `1`
>
	let g:clighter_rename_prompt_level = 1
<
------------------------------------------------------------------------------
						*g:clighter_enable_cross_rename*
g:clighter_enable_cross_rename~

`0`: disable
`1`: enable

Default: `1`
>
	let g:clighter_enable_cross_rename = 1
<
------------------------------------------------------------------------------
						*g:clighter_highlight_groups*
g:clighter_highlight_groups~

Define the token type of syntax to be highlighted.


Default: `['clighterMacroInstantiation','clighterStructDecl','clighterClassDecl','clighterEnumDecl','clighterEnumConstantDecl','clighterTypeRef','clighterDeclRefExprEnum']`
>
	let g:clighter_highlight_groups = ['clighterMacroInstantiation','clighterStructDecl','clighterClassDecl','clighterEnumDecl','clighterEnumConstantDecl','clighterTypeRef','clighterDeclRefExprEnum']
<
------------------------------------------------------------------------------
						*g:clighter_cursor_hl_default*
g:clighter_cursor_hl_default~

Enable cursor highlight by default.

Default: `1`
>
	let g:clighter_cursor_hl_default = 1
<
==============================================================================
						*clighter-commands-and-functions*
5. Commands and Functions ~

Clighter provides these commands and functions.

|ClighterEnable|
|ClighterDisable|
|ClighterToggleCursorHL|
|clighter#Rename()|
|clighter#SetCompileArgs()|

------------------------------------------------------------------------------
						*ClighterEnable*
ClighterEnable~

Enable clighter plugin.

------------------------------------------------------------------------------
						*ClighterDisable*
ClighterDisable~

Disable clighter plugin.

------------------------------------------------------------------------------
						*ClighterToggleCursorHL*
ClighterToggleCursorHL~

Toggle cursor highlighting.

------------------------------------------------------------------------------
						*clighter#Rename()*
clighter#Rename()~

* An experimental function to do rename refactoring.
* The scope is opened vim buffers.
* There is no one-step undo/redo method.
* Strongly recommend that backing up all files before calling this function.
* For convenience, you can add key mapping in your vimrc:
>
	nmap <silent> <Leader>r :call clighter#Rename()<CR>
>
------------------------------------------------------------------------------
						*clighter#SetCompileArgs()*
clighter#SetCompileArgs()~

Set clang compile args in runtime.

==============================================================================
						*clighter-syntax-group*
6. Syntax Group~

Clighter defines these syntax groups corresponded to libclang.

hi link *clighterMacroInstantiation* Constant
hi link *clighterTypeRef* Identifier
hi link *clighterStructDecl* Type
hi link *clighterClassDecl* Type
hi link *clighterEnumDecl* Type
hi link *clighterEnumConstantDecl* Identifier
hi link *clighterDeclRefExprEnum* Identifier
hi link *clighterCursorSymbolRef* IncSearch
hi link *clighterFunctionDecl* None
hi link *clighterDeclRefExprCall* None
hi link *clighterMemberRefExpr* None
hi link *clighterNamespace* None

You can customize these colors in your colorscheme, for example:
>
    hi clighterTypeRef term=NONE cterm=NONE ctermbg=232 ctermfg=255 gui=NONE
    hi clighterClassDecl term=NONE cterm=NONE ctermbg=255 ctermfg=232 gui=NONE
<
==============================================================================
						*clighter-faq*
7. FAQ

Q. The clighter plugin doesn't work.
A. Vim version 7.4 with python2.x is required, and make sure libclang(3.5 is
recommended) is installed correctly and set |g:clighter_libclang_file| if
need.

Q. Why rename-refactoring function is an experimental function?
A. Even though libclang provides many useful informations, it's not enough to
do cross file rename-refactoring. Clighter needs to use its own way way to
'guess' what should be renamed. Clighter can't gurantee the result of
rename-factoring result is perfect.

==============================================================================

vim:tw=78:ts=8:noet:ft=help:
