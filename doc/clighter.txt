*clighter.txt*	Plugin for c-family semantic source code highlighting, based
on Clang
*clighter*

Author: bbchung (afafaf4@gmail.com)
For Vim version 7.3 or above
Last change: 2014 July 10

==============================================================================
CONTENTS                                                  *clighter-contents*
1. Intro 			|clighter-intro|
2. Clighter on the internet	|clighter-internet|
3. Requirements			|clighter-requirements|
4. Options 			|clighter-options|
5. Customize Colors 		|clighter-colors|
6. FAQ				|clighter-faq|

==============================================================================
						*clighter-intro*
1. Intro~
Clighter(Clang Highlighter) is a c-family semantic highlighting plugin for
Vim, based on Clang. Clighter use libclang to enhance c-family source code
highlighting from Vim builtin syntax highlighting to semantic highlighting.
Clighter doesn't disable the builtin syntax highlighting, but just "append"
the semantic highlighting into the code.  

Clighter provides the following features:

    * Automatically do semantic highlighting for c-family source code.
    * Automatically mark all words that are same as the word under cursor
    * Options to customize the colors

==============================================================================
						*clighter-internet*
2. Clighter on the internet~

The Github repository is at:
>
	https://github.com/bbchung/clighter
<
==============================================================================
						*clighter-requirements*
3. Requirements~

The clighter plugin requires the following:

    * Vim version 7.3(or above) with python2 enabled
    * libclang

Clighter currently works only at linux platform, others have not been tested.

==============================================================================
						*clighter-options*
4. Options~

|'g:enable_clighter'|			Enable the Clighter
|'g:clighter_cursor_toggle_key'|	Keymap for toggling search highlighting
|'g:clighter_clang_options'|		The Compile options for Clang
|'g:clighter_libclang_file'|		The path of the libclang

						*'enable_clighter'*
g:enable_clighter~
If enabled, Clighter will start with Vim, you can disable Clighter by set
g:enable_clighter to 0.

Default: 1
>
	let g:enable_clighter = 0
<

						*'clighter_cursor_toggle_key'*
g:clighter_cursor_toggle_key~
Define the hotkey to toggle cursor highlighting function.

Default: '<F3>'
>
	let g:clighter_cursor_toggle_key = '<F3>'
<
						*'clighter_clang_options'*
g:clighter_clang_options~
The compiler options for Clang. Sometimes Clighter doesn't do correct
highlighting cause Clang can't parse the source code without necessary
options, so you need tell Clang how to parse the code. You can set the
compiler options to g:clighter_clang_options with list.

Default: []
>
	let g:clighter_clang_options = ['-std=c++', '-DLinux']
<
						*'clighter_libclang_file'*
g:clighter_libclang_file~
If your libclang is not in default path of system, tell Clighter by this
option.

Default: undefined
>
	let g:clighter_libclang_file = '/usr/lib/libclang.so'
<
==============================================================================
						*clighter-colors*
5. Customize Colors~

Clighter defines the following syntax group corresponding to CursorKing of
Clang.

MacroInstantiation~
>
	hi link MacroInstantiation Macro
>

TypeRef~
>
	hi link TypeRef Type
>

StructDecl~
>
	hi link StructDecl Type
>

ClassDecl~
>
	hi link ClassDecl Type
>

EnumDecl~
>
	hi link EnumDecl Type
>

EnumConstantDecl~
>
	hi link EnumConstantDecl Identifier
>

DeclRefExpr~
>
	hi link DeclRefExpr Identifier
>

You can customize these colors in your colorscheme, for example:
>
	hi TypeRef term=NONE cterm=NONE ctermbg=232 ctermfg=255 gui=NONE
	hi ClassDecl term=NONE cterm=NONE ctermbg=255 ctermfg=232 gui=NONE
<

==============================================================================
						*clighter-faq*
6. FAQ

Q. The clighter plugin doesn't work.
A. Vim version 7.3(or above) is required, and make sure libclang is installed
correctly and set g:clighter_libclang_file if need.

Q. Highlighting is not quick-response
A. Clighter use CursorHold event to update the current window highlighting,
and only highlight the code when parsing is done. To get the better response
time, you can change updatetime smaller and pray your Clang run faster.
Notice that many other plugins will change updatetime. If the code includes
the header file that was modified, you must save the header.
>
	set updatetime=1200
<

==============================================================================

vim:tw=78:ts=8:noet:ft=help:
