*clighter.txt*	Plugin to improve c-family development environment based on Clang
*clighter*

Author: bbchung (afafaf4@gmail.com)
For Vim version 7.4+

==============================================================================
CONTENTS                                                  *clighter-contents*
1. Intro 			|clighter-intro|
2. Clighter on the internet	|clighter-internet|
3. Requirements			|clighter-requirements|
4. Installation			|clighter-installation|
5. Options 			|clighter-options|
6. Commands 			|clighter-commands|
7. Customize Colors 		|clighter-colors|
8. FAQ				|clighter-faq|

==============================================================================
						*clighter-intro*
1. Intro~
Clighter(C Lighter) is a vim plugin that integrates libclang to improve
development environment for c-family programming. Clighter provides following
features currently:

* Syntax(semantic) highlighting
* Cursor word highlighting
* Customizable color of highlighting
* Experimental function for rename-refactoring

==============================================================================
						*clighter-internet*
2. Clighter on the internet~

The Github repository is at:
>
	https://github.com/bbchung/clighter
<
==============================================================================
						*clighter-requirements*
3. Requirements~

Clighter requires the following:

* Vim version 7.4+ with python2.x enabled
* libclang(3.5 is recommended)
* Clighter has been tested in linux platform only

==============================================================================
						*clighter-installation*
4. Installation~

Vundle Install~
>
	Bundle 'bbchung/clighter'
<
Manuall Install~

Untar the clighter.tar.gz to your vim path.

==============================================================================
						*clighter-options*
5. Options~

|'g:clighter_autostart'|		Enable the Clighter when vim start
|'g:clighter_window_size'|		Window size for highlighting
|'g:clighter_clang_options'|		The Compile options for Clang
|'g:clighter_libclang_file'|		The file path of the libclang
|'g:clighter_realtime'|			Update highlighting in realtime	
|'g:clighter_rename_prompt_level'|	Set prompt level of rename-refactoring
|'g:clighter_enable_cross_rename'|	Enable cross buffer rename-refactoring

						*'clighter_autostart'*
g:clighter_autostart~
Clighter automatically start while g:clighter_autostart == `1`.

Default: `1`
>
	let g:clighter_autostart = 0
<

						*'clighter_window_size'*
g:clighter_window_size~
Clighter uses vim's regular expression(RE) engine to do syntax highlighting,
but the RE engine performs not well while there are too many RE rules. To get
the better performance, Clighter can highlights a given region(window) instead
of whole buffer.
	
`<0`: highlight whole buffer.

`>=0`: highlight from top line number reduce 100 * clighter_window_size to
bottom line number plug 100 * clighter_window_size of screen.

Default: `1`
>
	let g:clighter_window_size = -1 " whole buffer
	let g:clighter_window_size = 0 " highlight current screen of window
<
						*'clighter_clang_options'*
g:clighter_clang_options~
The compiler options for Clang. Clighter will pass these options to libclang
to parse the code. Notice that bad options will cause clighter not working
even crashing.

Default: ['-Iinclude', '-x', 'c++']
>
	let g:clighter_clang_options = ['-x', 'c++', '-std=c++', '-DLinux']
<
						*'clighter_libclang_file'*
g:clighter_libclang_file~
Clighter try to find libclang-3.5 in your system automatically, if clighter
doesn't find the libclang or other version of libclang is used, you need set
this path.

Default: `''`
>
	let g:clighter_libclang_file = '/usr/lib/libclang.so'
<
						*'clighter_realtime'*
g:clighter_realtime~
Do syntax highlighting in realtime. Turn off this option may improve the
performance.

Default: `1`
>
	let g:clighter_realtime = 1
<
g:clighter_rename_prompt_level~
The prompt level of rename refactoring.

`0`: no prompt
`1`: prompt while do cross buffer renaming
`2`: prompt of each word that going to be replaced

Default: `1`
>
	let g:clighter_rename_prompt_level = 1
<

g:clighter_enable_cross_rename~
`0`: disable
`1`: enable

Default: `1`
>
	let g:clighter_enable_cross_rename = 1
<

g:clighter_highlight_groups~
Define the token type to highlight.


Default:
>
	['clighterMacroInstantiation', 'clighterStructDecl', 'clighterClassDecl', 'clighterEnumDecl', 'clighterEnumConstantDecl', 'clighterTypeRef', 'clighterDeclRefExprEnum']
<

==============================================================================
						*clighter-commands*
6. Commands ~
Clighter provides these commands and functions.

Enable Clighter~
>
	ClighterEnable
<

Disable Clighter~
>
	ClighterDisable
<

Toggle cursor highlighting~
>
	ClighterToggleCursorHL
<
Rename-refactor~
	* It's a experimental function, and it's maybe not reliable.
	* It's not project scoped(the scope is opend vim buffer list).
	* Strongly recommend that backing up all files before calling this
	  function.
>
	clighter#Rename()
<
    	For convenience, you can add key mapping in your vimrc:
>
    	nmap <silent> <Leader>r :call clighter#Rename()<CR>
>
Set clang compile options in runtime~
>
    	call clighter#SetClangOptions()
>

==============================================================================
						*clighter-colors*
7. Customize Colors~

Clighter defines these syntax groups corresponding to CursorKind of libclang.

clighterMacroInstantiation~
>
	hi link clighterMacroInstantiation Constant
>

clighterTypeRef~
>
	hi link clighterTypeRef Identifier
>

clighterStructDecl~
>
	hi link clighterStructDecl Type
>

clighterClassDecl~
>
	hi link clighterClassDecl Type
>

clighterEnumDecl~
>
	hi link clighterEnumDecl Type
>

clighterEnumConstantDecl~
>
	hi link clighterEnumConstantDecl Identifier
>

clighterDeclRefExprEnum~
>
	hi link clighterDeclRefExprEnum Identifier

clighterCursorDefRef~
>
	hi link clighterCursorDefRef IncSearch

clighterFunctionDecl~
>
	hi link clighterFunctionDecl None

clighterDeclRefExprCall~
>
	hi link clighterDeclRefExprCall None

clighterMemberRefExpr~
>
	hi link clighterMemberRefExpr None

clighterNamespace~
>
	hi link clighterNamespace None

>
You can customize these colors in your colorscheme, for example:
>
	hi clighterTypeRef term=NONE cterm=NONE ctermbg=232 ctermfg=255 gui=NONE
	hi clighterClassDecl term=NONE cterm=NONE ctermbg=255 ctermfg=232 gui=NONE
<

==============================================================================
						*clighter-faq*
8. FAQ

Q. The clighter plugin doesn't work.
A. Vim version 7.4+ with python2.x is required, and make sure libclang(3.5 is
recommended) is installed correctly and set g:clighter_libclang_file if need.

Q. Why rename-refactoring function is an experimental function
A. Even though libclang provides many useful informations, it's not enough to
do cross file rename-refactoring, so Clighter needs to use its own way way to
'guess' what should be renamed. Clighter can't gurantee the result of
rename-factoring result is perfect.

==============================================================================

vim:tw=78:ts=8:noet:ft=help:
