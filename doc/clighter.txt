*clighter.txt*	Plugin to improve c-family development environment based on Clang
*clighter*

Author: bbchung (afafaf4@gmail.com)
For Vim version 7.4+

==============================================================================
CONTENTS                                                  *clighter-contents*
1. Intro 			|clighter-intro|
2. Clighter on the internet	|clighter-internet|
3. Requirements			|clighter-requirements|
4. Options 			|clighter-options|
5. Commands 			|clighter-commands|
6. Customize Colors 		|clighter-colors|
7. FAQ				|clighter-faq|

==============================================================================
						*clighter-intro*
1. Intro~
Clighter(C Lighter) is a vim plugin that integrates the libclang to improve c-family
development environment, and it currently provides the following features(for c-family):

* Automatically do semantic highlighting
* Automatically highlight all words that with the same definition
* Options to customize the colors
* Experimental function to do rename-refactoring

==============================================================================
						*clighter-internet*
2. Clighter on the internet~

The Github repository is at:
>
	https://github.com/bbchung/clighter
<
==============================================================================
						*clighter-requirements*
3. Requirements~

Clighter requires the following:

* Vim version 7.4+ with python2.x enabled
* libclang(only 3.5 has been tested)

Clighter only has been tested in linux platform

==============================================================================
						*clighter-options*
4. Options~

|'g:clighter_autostart'|		Enable the Clighter when vim start
|'g:clighter_window_size'|		Window size for highlighting
|'g:clighter_clang_options'|		The Compile options for Clang
|'g:clighter_libclang_file'|		The file path of the libclang
|'g:clighter_realtime'|			Update highlighting in realtime	
|'g:clighter_rename_prompt_level'|	Set prompt level of rename-refactoring
|'g:clighter_enable_cross_rename'|	Enable cross buffer rename-refactoring

						*'clighter_autostart'*
g:clighter_autostart~
Clighter will automatically start syntax highlight engine if g:clighter_autostart == `1`.

Default: `1`
>
	let g:clighter_autostart = 0
<

						*'clighter_window_size'*
g:clighter_window_size~
Clighter uses vim's regular expression(RE) engine to do syntax highlighting, however,
vim's RE engine performs bad while there are too many RE rules. To avoid too many RE
rules, Clighter only highlights a given region(window) instead of whole buffer.
	
`<0`: highlight whole buffer.
`>=0`: highlight from top line number reduce 100 * clighter_window_size to bottom line
number plug 100 * clighter_window_size of screen.

Default: `1`
>
	let g:clighter_window_size = -1 " whole buffer
	let g:clighter_window_size = 0 " highlight current screen of window
<
						*'clighter_clang_options'*
g:clighter_clang_options~
The compiler options for Clang. Clighter will pass these options to libclang
to parse the code.

Default: `[]`
>
	let g:clighter_clang_options = ['-std=c++', '-DLinux']
<
						*'clighter_libclang_file'*
g:clighter_libclang_file~
The path of libclang.

Default: `''`
>
	let g:clighter_libclang_file = '/usr/lib/libclang.so'
<
						*'clighter_realtime'*
g:clighter_realtime~
Do syntax highlighting in realtime(by CursorMoved event). Turn off this option may improve
the performance.

Default: `1`
>
	let g:clighter_realtime = 1
<
g:clighter_rename_prompt_level~
The prompt level of rename refactoring.

`0`: no prompt
`1`: prompt while do cross buffer renaming
`2`: prompt of each word that going to be replaced

Default: `1`
>
	let g:clighter_realtime = 1

### g:clighter_enable_cross_rename
`0`: disable
`1`: enable

Default: `1`
>
	let g:clighter_realtime = 1



==============================================================================
						*clighter-commands*
Clighter provides command to control it

Enable Clighter's syntax highlight engine~
>
	ClighterEnable
<

Disable Clighter's syntax highlight engine~
Notice that is will not disable the cursor highlighting.
>
	ClighterDisable
<

Toggle cursor highlighting~
>
	ClighterToggleCursorHL
<
Rename-refactor the variable/function name under vim cursor~
	* It's a experimental function and maybe not reliable
	* It's not project based(only processes the files that have been opened in vim's
	  buffer list already)
	* Makesure that you have save all files before calling this function.
>
	clighter#Rename()
<
    	For convenience, you can add this key map:
>
    	nmap <silent> <Leader>r :call clighter#Rename()<CR>
>


==============================================================================
						*clighter-colors*
6. Customize Colors~

Clighter defines the following syntax group corresponding to CursorKing of
Clang.

MacroInstantiation~
>
	hi link MacroInstantiation Macro
>

TypeRef~
>
	hi link TypeRef Type
>

StructDecl~
>
	hi link StructDecl Type
>

ClassDecl~
>
	hi link ClassDecl Type
>

EnumDecl~
>
	hi link EnumDecl Type
>

EnumConstantDecl~
>
	hi link EnumConstantDecl Identifier
>

EnumDefRefExpr~
>
	hi link EnumDefRefExpr Identifier
>

You can customize these colors in your colorscheme, for example:
>
	hi TypeRef term=NONE cterm=NONE ctermbg=232 ctermfg=255 gui=NONE
	hi ClassDecl term=NONE cterm=NONE ctermbg=255 ctermfg=232 gui=NONE
<

==============================================================================
						*clighter-faq*
7.. FAQ

Q. The clighter plugin doesn't work.
A. Vim version 7.4+ with python2.x is required, and make sure libclang(3.5 has been tested
only) is installed correctly and set g:clighter_libclang_file if need.

Q. Highlighting is not quick-response
A. Clighter use CursorHold event to update the current window highlighting,
and only highlight the code when parsing is done. To get the better response
time, you can set g:clighter_realtime = 1, or change updatetime to a smaller
value and pray your Clang run faster. Notice that many other plugins will
change updatetime. If the code includes the header file that was modified,
you must save the header.
>
	let g:clighter_realtime = 1
	set updatetime=1200
<
Q. Why rename-refactoring function is an experimental function
A. Even though libclang provides many useful informations, it's not enough to do cross
file rename-refactoring, so Clighter needs to use its own way way to 'guess' what should
be renamed. Clighter can't gurantee the result of rename-factoring result is perfect.

==============================================================================

vim:tw=90:ts=8:noet:ft=help:
